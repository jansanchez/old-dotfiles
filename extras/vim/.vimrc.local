"set guifont=PowerlineSymbols:h15
set guifont=Liberation_Mono_for_Powerline:h10
let g:Powerline_symbols = 'fancy'
let g:airline_powerline_fonts = 1
set encoding=utf-8
"set term=rxvt-unicode-256color
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
"set term=xterm-256color
set term=xterm
set termencoding=utf-8

"for handle into tmux
set term=screen-256color
" Disable Background Color
set t_ut=
"color black_angus
set background=dark
syntax on
"color jellybeans
let g:kolor_italic=1 " Enable italic. Default: 1 
let g:kolor_bold=1 " Enable bold. Default: 1 
let g:kolor_underlined=0 " Enable underline for 'Underlined'. Default: 0 
let g:kolor_alternative_matchparen=0 " Gray 'MatchParen' color. Default: 0 
let g:solarized_termtrans=0 "For respect the bg in solid
colorscheme solarized
"colorscheme kolor
"colorscheme trivial256

set nospell

set smartindent
set tabstop=4
set shiftwidth=4
set expandtab

nmap <silent> <F3> :NERDTreeToggle<CR>
let NERDTreeMapOpenInTab='<ENTER>'

"copy paste clipboard
nmap <leader>y v"+y<Esc>
vmap <leader>y "+y

"ctrl+s = guardar archivo
nmap <c-s> :w<CR>
vmap <c-s> <Esc><c-s>gv
imap <c-s> <Esc><c-s>

nmap <F2> :update<CR>
vmap <F2> <Esc><F2>gv
imap <F2> <c-o><F2>
"Actualizando la parte de indentado
let g:indentLine_color_term = 239
let g:indentLine_color_gui = '#A4E57E'
let g:indentLine_char = 'Â¦'

"para optimizacion del vim y evitar que sea muy slow
"unbundle plugins
UnBundle 'numbers.vim'
UnBundle 'justinmk/vim-sneak'
UnBundle 'bling/vim-bufferline'
let g:spf13_use_powerline = 1
let g:spf13_use_old_powerline = 1
set nu
set norelativenumber
set nocursorline

"cursor
if &term =~ "xterm\\|rxvt"
    " use an orange cursor in insert mode
    let &t_SI = "\<Esc>]12;orange\x7"
    " use a red cursor otherwise
    let &t_EI = "\<Esc>]12;gray\x7"
    "silent !echo -ne "\033]12;gray\007"
    " reset cursor when vim exits
    autocmd VimLeave * silent !echo -ne "\033]112\007"
    " use \003]12;gray\007 for gnome-terminal
endif

"for results of grep
set switchbuf+=usetab,newtab

"for ctrpl 
"enable per-project .vimrc files
set exrc
"Only execute safe per-project vimrc commands
set secure
"And ignore some files with extensions
set wildignore+=tags
set wildignore+=*/tmp/*
set wildignore+=*/vendor/*
set wildignore+=*/spec/vcr/*
set wildignore+=*/public/*
set wildignore+=*/chef/*
set wildignore+=*/coverage/*
set wildignore+=*.png,*.jpg,*.otf,*.woff,*.jpeg,*.orig

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Unite
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"set modifiable
"let g:unite_source_history_yank_enable = 1
"let g:unite_data_directory='~/.vim/.cache/unite'
"let g:unite_source_rec_max_cache_files=50000
"let g:unite_enable_start_insert = 1
"let g:unite_split_rule = "botright"
"let g:unite_force_overwrite_statusline = 0
"let g:unite_winheight = 10

"call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
            "\ 'ignore_pattern', join([
            "\ '\.git/',
            "\ 'git5/.*/review/',
            "\ 'google/obj/',
            "\ ], '\|'))

"" Use the fuzzy matcher for everything
"call unite#filters#matcher_default#use(['matcher_fuzzy'])

"" Use the rank sorter for everything
"call unite#filters#sorter_default#use(['sorter_rank'])

"nnoremap <space>/ :Unite grep:.<cr>
"nnoremap <space>y :Unite history/yank<cr>
"nnoremap <leader>f :Unite file_rec<cr>
"nnoremap <leader>c :Unite colorscheme -auto-preview<cr>

"autocmd FileType unite call s:unite_settings()

"function! s:unite_settings()
    "let b:SuperTabDisabled=1
    ""imap <buffer> <C-j> <NOP>
    "imap <buffer> <C-j>    <Plug>(unite_select_next_line)
    "imap <buffer> <C-k>    <Plug>(unite_select_previous_line)
    "imap <silent><buffer><expr> <C-x> unite#do_action('split')
    "imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
    "imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')

    "nmap <buffer> <ESC>
    "<Plug>(unite_exit)
"endfunction
" FOR VERY FAST VIM
" =================
set ttyfast " u got a fast terminal
set ttyscroll=3
set lazyredraw " to avoid scrolling problems
" =================
if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif
"pathogen?
"execute pathogen#infect()
filetype plugin indent on
"TMUX
if $TMUX == ''
    set clipboard+=unnamed 
endif
